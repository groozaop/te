import sys, os, time
NOME = "Exploit-IP-Scanner"
if sys.platform.startswith("win"):
    import ctypes
    ctypes.windll.kernel32.SetConsoleTitleW(NOME)
else:
    sys.stdout.write(f"\x1b]2;{NOME}\x07")
import requests, subprocess, re
from colorama import init, Fore, Style
import socket
from urllib.parse import urlparse
import threading, ipaddress, os
if not os.path.exists("/sdcard/Hits/𝐄𝐱ᴘʟᴏɪᴛ𝐈ᴘ𝐒ᴄᴀɴɴᴇʀ"):
    os.makedirs("/sdcard/Hits/𝐄𝐱ᴘʟᴏɪᴛ𝐈ᴘ𝐒ᴄᴀɴɴᴇʀ")
pasa1 = "\x1b[1;31m\n-----------.        .-----------\n  ------    \\  __  /    ------\n    -----    \\(  )/    -----\n       ---   ' \\/ `   ---\n         --- :    : ---\n           --`    '--\n           `/`/..\\`\\`\n        ====UU====UU====\n            '//||\\`\n              ''``\n      𝐄𝐱ᴘʟᴏɪᴛ 𝐈ᴘ 𝐒ᴄᴀɴɴᴇʀ \n"
pasa2 = "\n-----------.        .-----------\n  ------    \\  __  /    ------\n    -----    \\(  )/    -----\n       ---   ' \\/ `   ---\n         --- :    : ---\n           --`    '--\n           `/`/..\\`\\`\n        ====UU====UU====\n            '//||\\`\n              ''``\n      𝐄𝐱ᴘʟᴏɪᴛ 𝐈ᴘ 𝐒ᴄᴀɴɴᴇʀ\n"
print(pasa1)
from datetime import datetime
with open("output.txt", "a") as file:
    file.write(": " + pasa2 + "\n")
init(autoreset=True)
ip_pool = set()
ses = requests.Session()
output_directory = "/sdcard/hits/𝐄𝐱ᴘʟᴏɪᴛ𝐈ᴘ𝐒ᴄᴀɴɴᴇʀ/"
file_name = input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m FILE RECORD NAME :\x1b[0m")
file_name_with_prefix = f"𝐄𝐱ᴘʟᴏɪᴛ𝐈ᴘ𝐒ᴄᴀɴɴᴇʀ[{file_name}"
output_file = output_directory + f'{file_name_with_prefix}]#𝐄𝐱ᴘʟᴏɪᴛ[{datetime.now().strftime("%Y-%m-%d")}].txt'
m3u_url = input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE A COMPLETE M3U CONNECTION:\x1b[0m")

def check_server(m3u_url):
    try:
        response = requests.head(m3u_url)
        if response.status_code == 200:
            print(Fore.RED + "├▌ " + Fore.GREEN + "ACTIVATE CONNECTION TO THE SERVER.")
            time.sleep(2)
        else:
            print(Fore.RED + "├▌ Server is down.")
            exit()
    except requests.exceptions.RequestException:
        print(Fore.RED + "├▌ NO CONNECTION TO SERVER!")
        exit()


def scan_ports(ip):
    open_ports = []
    error_400_ports = []
    ports = [80, 8080, 8081, 8880, 8086, 443, 2083, 8443, 25463, 31210, 46500]
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((str(ip), port))
        if result == 0:
            open_ports.append(port)
            if port in (2083, 8081, 8443, 25463, 31210, 46500):
                print(Fore.GREEN + f"├▌{ip}:{port} ✔ Exploit  " + Style.RESET_ALL)
                with open(output_file, "a") as file:
                    file.write(f"├[✔]{ip}:{port} Exploit is appropriate\n")
            else:
                if result == 10053:
                    error_400_ports.append(port)
                sock.close()

    return (
     open_ports, error_400_ports)


def test_m3u_link(m3u_link):
    try:
        response = requests.get(m3u_link)
        if response.status_code == 200:
            print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m M3U CONNECTION :\x1b[0m\x1b[1;30;40;1m" + m3u_link + "\x1b[0m")
            payload_url = re.sub("get\\.php", "player_api.php", m3u_link)
            response = requests.get(payload_url)
            if response.status_code == 200:
                message = re.search('"message":"(.*?)"', response.text).group(1)
                message = str(message.encode("utf-8").decode("unicode-escape")).replace("\\/", "/")
                print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m PANEL MESSAGE :\x1b[0m\x1b[1;32;40;1m" + message + "\x1b[0m")
                with open(output_file, "a") as file:
                    file.write(f"├▌Player API Message: {message}\n")
                timezone = re.search('"timezone":"(.*?)"', response.text).group(1)
                print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m T-ZONE :\x1b[0m\x1b[1;32;40;1m" + timezone + "\x1b[0m")
                with open(output_file, "a") as file:
                    file.write(f"├▌Timezone: {timezone}\n")
                active_cons = re.search('"active_cons":"(.*?)"', response.text).group(1)
                print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m ACTIVE USER :\x1b[0m\x1b[1;32;40;1m" + active_cons + "\x1b[0m")
                with open(output_file, "a") as file:
                    file.write(f"├▌Expiration Date: {active_cons}\n")
            else:
                print("API information was not received.")
            return True
        else:
            print("❗️M3U link not workinga:", m3u_link)
            return False
    except requests.exceptions.RequestException as e:
        pass

    return False


def main():
    check_server(m3u_url)
    printds = "\x1b[1;91m├▌\x1b[0m\x1b[1;31m NOME DO REGISTRO DO ARQUIVO :\x1b[0m\x1b[1;30;40;1m" + file_name + "\x1b[0m"
    printp = "\x1b[1;91m├▌\x1b[0m\x1b[1;31m CONEXÃO M3U :\x1b[0m\x1b[1;30;40;1m" + m3u_url + "\x1b[0m"
    print("\x1b[H\x1b[J", end="")
    print(pasa1)
    print(printds)
    print(printp)
    comboc = str(input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m DO YOU KNOW THE TARGET CHANNEL NUMBER?\x1b[0m\n            \x1b[1;91m👑 \x1b[38;5;186m Sim \x1b[38;5;186m= s\n            \x1b[1;91m👑 \x1b[38;5;186m Não \x1b[38;5;186m= n\n\x1b[1;91m├▌\x1b[0m\x1b[1;33m RESPOSTA:\x1b[0m"))
    if comboc == "n":
        panel = input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE ONLY SERVER AND PORT :\x1b[0m")
        user = input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE USER : \x1b[0m")
        pas = input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE PASSWORD : \x1b[0m")
        urlksay = "http://" + panel + "/player_api.php?username=" + user + "&password=" + pas + "&action=get_live_streams"
        res = ses.get(urlksay, timeout=15, verify=False)
        veri = str(res.text)
        channel_count_auto = str(veri.count("stream_id"))
        print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m SEARCH FOR THE VALUE OF THE NUMBER OF CHANNELS :\x1b[0m\x1b[1;30;40;1m" + str(channel_count_auto) + "\x1b[0m")
        channel_count = int(input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE TARGET CHANNEL NUMBER: \x1b[0m"))
        with open(output_file, "a") as file:
            file.write("├▌PORT NUMBER ENTERED: " + str(channel_count_auto) + "\n")
    if comboc == "s":
        channel_count = int(input("\x1b[1;91m├▌\x1b[0m\x1b[1;33m WRITE TARGET CHANNEL NUMBER: \x1b[0m"))
        printh = "\x1b[1;91m├▌\x1b[0m\x1b[1;31m NUMBER OF TARGET CHANNELS :\x1b[0m\x1b[1;30;40;1m" + str(channel_count) + "\x1b[0m"
        print(printh)
    print("\x1b[H\x1b[J", end="")
    print(pasa1)
    print(printds)
    with open(output_file, "a") as file:
        file.write(" " + pasa2 + "\n")
    with open(output_file, "a") as file:
        file.write("┌───「 𝐈ɴғᴏʀᴍᴀᴄᴏᴇ𝐬 𝐃ᴏ 𝐂ᴀɴᴀʟ 」\n├▌M3U URL: " + m3u_url + "\n")
    with open(output_file, "a") as file:
        file.write("├▌NÚMERO DA PORTA DIGITADO: " + str(channel_count) + "\n")
    try:
        headers = {'User-Agent': '"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"', 
         'Referer': m3u_url, 
         'Accept': '"*/*"', 
         'Accept-Encoding': '"gzip, deflate"', 
         'Connection': '"keep-alive"'}
        domain = urlparse(m3u_url).hostname
        port = urlparse(m3u_url).port
        if not test_m3u_link(m3u_url):
            print("O link M3U não funciona.  O programa está terminando...")
            return
        response = requests.get(m3u_url, headers=headers, stream=True, timeout=5)
        m3u_content = response.text
        host = urlparse(m3u_url).netloc
        channels = re.findall("\\n#EXTINF.*\\n(.*?)\\n", m3u_content)
        channels_to_check = channels[:channel_count] if channel_count or channel_count_auto <= len(channels) else channels
        urls = re.findall("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", m3u_content)[:channel_count]
        print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m SERVIDOR :\x1b[0m\x1b[1;30;40;1m" + host + "\x1b[0m")
        print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m NÚMERO TOTAL DE CANAIS:\x1b[0m\x1b[1;30;40;1m", len(channels))
        with open(output_file, "a") as file:
            file.write("├▌SERVIDOR: " + host + "\n")
            file.write("├▌NÚMERO TOTAL DO CANAL: " + str(len(channels)) + "\n")
            file.write("├▌ENDEREÇOS IP E PORTAS: \n")
            file.write("╰────────⧳\n")
            file.write("┌────「 ENDEREÇOS IP PORT 」\n")
        print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m ENDEREÇOS IP :\x1b[0m\x1b[1;30;40;1m\x1b[0m")
        unique_ips = set()
        for url in urls:
            try:
                parsed_url = urlparse(url)
                ip = socket.gethostbyname(parsed_url.hostname)
                unique_ips.add(ip)
            except socket.gaierror:
                pass

        if unique_ips:
            for ip in unique_ips:
                print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m", ip)

        else:
            print(Fore.RED + "Nenhum endereço IP diferente encontrado." + Style.RESET_ALL)
        print("\x1b[1;91m├▌\x1b[0m\x1b[1;31m PORTA ENTRADAS ATIVA:\x1b[0m\x1b[1;30;40;1m\x1b[0m")
        threads = []
        for ip in unique_ips:
            thread = threading.Thread(target=scan_ports_thread, args=(ip,))
            thread.start()
            threads.append(thread)

        for thread in threads:
            thread.join()

    except (requests.exceptions.RequestException, socket.error) as e:
        pass


def scan_ports_thread(ip):
    try:
        open_ports, error_400_ports = scan_ports(ip)
        if open_ports:
            for port in open_ports:
                print(f"\x1b[1;93m├▌\x1b[0m {ip}:{port} ➧ \x1b[1;94m SSL \x1b[0m\x1b[0m\x1b[1;31m")
                with open(output_file, "a") as file:
                    file.write(f"├[✘]{ip}:{port} SSL\n")

        else:
            print(Fore.RED + f"{ip} Nenhuma porta aberta encontrada para." + Style.RESET_ALL)
        if error_400_ports:
            for port in error_400_ports:
                print(Fore.YELLOW + f"➧{ip}:{port} ❗️ Código de status 400" + Style.RESET_ALL)

    except socket.error:
        print(Fore.RED + f"Hatalı IP: {ip}. A verificação continua." + Style.RESET_ALL)


if __name__ == "__main__":
    main()
    input("Pressione ENTER para sair.")

